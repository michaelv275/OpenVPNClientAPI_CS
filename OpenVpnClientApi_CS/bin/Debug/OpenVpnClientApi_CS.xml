<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenVpnClientApi_CS</name>
    </assembly>
    <members>
        <member name="T:OpenVpnClientApi_CS.Client">
            <summary>
            ***ELEVATED PRIVILEGES ARE REQUIRED*** to make changes to the routing table in Windows 10. Ensure your app is eleavted before calling any methods in this API.
            
            This class is the entry point to use the API in C#. It also serves as the event receiver, so all openvpn events will be caught using the public events here. 
            By default, the events will be written to a console window. It is up to the implementer of the API to handle the events they wish.
            All methods and properties in this class exist solely in .NET and do not interact directly with the openVPN3 library. 
            Instead, the methods in this class will utilize the OpenVPNClientThread.cs object to interact with the underlying C++ openVPN3 library.
            </summary>
        </member>
        <member name="P:OpenVpnClientApi_CS.Client.ShouldRestartOnRouteTabeChange">
            <summary>
            Determines if the OpenVPN connection will automatically restart if the routing table is changed after a connection is established.
            This is used to enforce internet lockouts and only allow traffic to be routed to the endpoint specified in the ovpn config.
            true by default.
            </summary>
        </member>
        <member name="E:OpenVpnClientApi_CS.Client.ConnectionClosed">
            <summary>
            Event handler for the ConnectionClosed event
            Default is to write "Disconnected from VPN" to the console. 
            </summary>
        </member>
        <member name="E:OpenVpnClientApi_CS.Client.ConnectionEstablished">
            <summary>
            Event handler for the ConnectionClosed event
            Default is to write "Connected to VPN" to the console.
            </summary>
        </member>
        <member name="E:OpenVpnClientApi_CS.Client.ConnectionTimedOut">
            <summary>
            Event handler for the ConnectionTimedOut event
            Default is to write "Connection request timed out" to the console
            </summary>
        </member>
        <member name="E:OpenVpnClientApi_CS.Client.LogReceived">
            <summary>
            Event handler for the Log and Stat events
            Default is to log the message to the console.
            </summary>
        </member>
        <member name="E:OpenVpnClientApi_CS.Client.CoreEventReceived">
            <summary>
            Event handler for the CoreEventReceived event
            Default is to log the message to the console.
            </summary>
        </member>
        <member name="E:OpenVpnClientApi_CS.Client.SecurityEventReceived">
            <summary>
            Event handler for security events such as the route table being altered after vpn connection
            Default is to log the message to the console.
            </summary>
        </member>
        <member name="M:OpenVpnClientApi_CS.Client.#ctor">
            <summary>
            creates a new Client object and initializes the C++ implementation Object, a new OpenVPNClientThread object
            CLientAPI_Config object, and a ClientAPI_ProvideCreds object. 
            </summary>
        </member>
        <member name="M:OpenVpnClientApi_CS.Client.SetConfigWithMultiLineString(System.String)">
            <summary>
            Sets the ClientAPI_Config object with a string. The string must be using newline delimeters "\n, \r, \r\n"
            </summary>
            <param name="configAsMultiLineString"></param>
        </member>
        <member name="M:OpenVpnClientApi_CS.Client.SetConfigWithFile(System.String)">
            <summary>
            Sets the ClientAPI_Config object with the contents of a file. 
            </summary>
            <param name="fileLocation">The fully qualified location of the desired file to read</param>
        </member>
        <member name="M:OpenVpnClientApi_CS.Client.AddCredentials(System.Boolean,System.String,System.String)">
            <summary>
            provide credentials if VPN server requires them
            </summary>
            <param name="useCredentials"></param>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:OpenVpnClientApi_CS.Client.Connect">
            <summary>
            Use the OpenVPNClientThread object to start a connection.
            
            If another connection is active, end it. Once that connection is ended, start the new one.
            </summary>
        </member>
        <member name="M:OpenVpnClientApi_CS.Client.StartMonitoringRoutingTable">
            <summary>
            Manually starts the Routing table monitoring thread.
            </summary>
        </member>
        <member name="M:OpenVpnClientApi_CS.Client.StopMonitoringRoutingTable">
            <summary>
            Manually stops the Routing table monitoring thread
            </summary>
        </member>
        <member name="M:OpenVpnClientApi_CS.Client.Stop">
            <summary>
            Stop the OpenVPNClientThread
            </summary>
        </member>
        <member name="M:OpenVpnClientApi_CS.Client.IsVPNActive">
            <summary>
            Checks if the VPN thread is not null and is alive
            </summary>
            <returns>Whether the VPN thread is currently in use</returns>
        </member>
        <member name="M:OpenVpnClientApi_CS.Client.Show_stats">
            <summary>
            Gets the IO stats from the openVPN core library and fires the OnLogReceived event with output
            </summary>
        </member>
        <member name="M:OpenVpnClientApi_CS.Client.ReconnectVPN">
            <summary>
            Manually restart the connection
            </summary>
        </member>
        <member name="M:OpenVpnClientApi_CS.Client.ConnectionFinished(ClientAPI_Status)">
            <summary>
            Called when the connection has been cancelled, or stopped.
            Writes a message to the console window, then triggers the ConnectionClosed Event
            </summary>
            <param name="status">The ClientAPI_Status object containing the data to write</param>
        </member>
        <member name="M:OpenVpnClientApi_CS.Client.Event_(ClientAPI_Event)">
            <summary>
            Fired when connection is started, stopped, or cancelled
            Any event returned from the CoreLibrary goes through here.
            
            If the event was a connected event, the OnConnectionAttemptCompleted event will be fired
            </summary>
            <param name="apiEvent"></param>
        </member>
        <member name="M:OpenVpnClientApi_CS.Client.ExternalPkiCertRequest(ClientAPI_ExternalPKICertRequest)">
            <summary>
            Callback to get a certificate
            </summary>
            <param name="req"></param>
        </member>
        <member name="M:OpenVpnClientApi_CS.Client.ExternalPkiSignRequest(ClientAPI_ExternalPKISignRequest)">
            <summary>
            Callback to sign data
            </summary>
            <param name="req"></param>
        </member>
        <member name="M:OpenVpnClientApi_CS.Client.Log(ClientAPI_LogInfo)">
            <summary>
            receives a message from the OpenVPN core library and fires OnLogReceived event
            </summary>
            <param name="loginfo"></param>
        </member>
        <member name="M:OpenVpnClientApi_CS.Client.Log(System.String)">
            <summary>
            Log a message that is not from the C++ core
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:OpenVpnClientApi_CS.Client.PauseOnConnectionTimeout">
            <summary>
            When a connection is close to timeout, the core will call this
            method.  If it returns false, the core will disconnect with a
            CONNECTION_TIMEOUT event.  If true, the core will enter a PAUSE
            state.
            
            False by default
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenVpnClientApi_CS.Client.SocketProtect(System.Int32)">
            <summary>
            Called to "protect" a socket from being routed through the tunnel
            False by default
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="T:OpenVpnClientApi_CS.Enums.SecurityEventType">
            <summary>
            The different security events. some are fatal, some not. Most of these will come from clievent.hpp
            </summary>
        </member>
        <member name="T:OpenVpnClientApi_CS.OpenVPNClientThread">
            <summary>
            This class interacts directly with the underlying C++ openVPN3 library. Rather, the code that was generated by swig, that created invocable
            C# methods from the C++ code.
            </summary>
        </member>
        <member name="M:OpenVpnClientApi_CS.OpenVPNClientThread.Connect(OpenVpnClientApi_CS.Client)">
            Start connect session in worker thread
        </member>
        <member name="M:OpenVpnClientApi_CS.OpenVPNClientThread.StartRoutingTableMonitoring">
            <summary>
            starts the routing table monitor thread if it is not already. 
            Tells openVPN library to start monitoring the routing table, as .Net cannot do that.
            </summary>
        </member>
        <member name="M:OpenVpnClientApi_CS.OpenVPNClientThread.ClearMonitoringThread">
            <summary>
            Resets the routing table monitor thread variable
            </summary>
        </member>
        <member name="M:OpenVpnClientApi_CS.OpenVPNClientThread.StopRoutingTableMonitoring">
            <summary>
            If the monitor thread is still alive, call the OpenVPN cancel method and reset the thread.
            If the monitor thread is terminated, reset the thread to be used later.
            </summary>
        </member>
        <member name="M:OpenVpnClientApi_CS.OpenVPNClientThread.GetBytesIn">
            <summary>
            prints how many bytes were received with base.stats_value(index) in C++
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenVpnClientApi_CS.OpenVPNClientThread.GetBytesOut">
            <summary>
            prints how many bytes were sent with base.stats_value(index) in C++
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenVpnClientApi_CS.OpenVPNClientThread.EndClientThread(ClientAPI_Status)">
            <summary>
            Terminates _clientThread object and any work it was doing
            </summary>
            <param name="status"></param>
        </member>
        <member name="T:ClientAPI_LLVector.ClientAPI_LLVectorEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:ClientAPI_ServerEntryVector.ClientAPI_ServerEntryVectorEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:ClientAPI_StringVec.ClientAPI_StringVecEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
    </members>
</doc>
